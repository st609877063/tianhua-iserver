package com.gift.dao.impl;import java.util.HashMap;import java.util.List;import java.util.Map;import org.mybatis.spring.support.SqlSessionDaoSupport;import org.springframework.stereotype.Repository;import com.gift.bean.Gift_user_operation;import com.gift.dao.Gift_user_operationDAO;/** * @Repository @Service @Controller，它们分别对应存储层Bean，业务层Bean，和展示层Bean。 * @Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。 * @scope="prototype"来保证每一个请求有一个单独的Action来处理， 避免struts中Action的线程安全问题。 */@Repository@SuppressWarnings({ "unchecked", "rawtypes" })public class Gift_user_operationDAOImpl extends SqlSessionDaoSupport implements		Gift_user_operationDAO {	public List<Gift_user_operation> findAllGift_user_operation() {		try {			return this.getSqlSession()					.selectList("findAllGift_user_operation");		} catch (RuntimeException re) {			logger.error("findAllGift_user_operation failed :{}", re);			throw re;		}	}	public Gift_user_operation findGift_user_operationByUo_id(Integer uo_id) {		try {			return this.getSqlSession().selectOne(					"findGift_user_operationByUo_id", uo_id);		} catch (RuntimeException re) {			logger.error(					"findGift_userByUser_id findGift_user_operationByUo_id :{}",					re);			throw re;		}	}	public void removeGift_user_operation(			Gift_user_operation gift_user_operation) {		try {			this.getSqlSession().delete("removeGift_user_operation",					gift_user_operation);		} catch (RuntimeException re) {			logger.error("removeGift_user_operation failed :{}", re);			throw re;		}	}	public void saveGift_user_operation(Gift_user_operation gift_user_operation) {		try {			getSqlSession().insert("saveGift_user_operation",					gift_user_operation);		} catch (RuntimeException re) {			logger.error("saveGift_user_operation failed :{}", re);			throw re;		}	}	public void updateGift_user_operation(			Gift_user_operation gift_user_operation) {		try {			this.getSqlSession().update("updateGift_user_operation",					gift_user_operation);		} catch (RuntimeException re) {			logger.error("updateGift_user_operation failed :{}", re);			throw re;		}	}	public int findGift_user_operationByUser_id_count(Integer user_id_c) {		Map Gift_user_operationmap_count = new HashMap();		Gift_user_operationmap_count.put("user_id_c", user_id_c);		try {			return (Integer) this.getSqlSession().selectOne(					"findGift_user_operationByUser_id_count",					Gift_user_operationmap_count);		} catch (RuntimeException re) {			logger.error("findGift_user_operationByUser_id_count failed :{}",					re);			throw re;		}	}	public List<Gift_user_operation> findGift_user_operationByUser_id(			Integer user_id_c, int currentPage, int lineSize) {		Map Gift_user_operationmap = new HashMap();		Gift_user_operationmap.put("user_id_c", user_id_c);		Gift_user_operationmap.put("sartRow", ((currentPage - 1) * lineSize));		Gift_user_operationmap.put("endRow", currentPage * lineSize);		try {			return this.getSqlSession().selectList(					"findGift_user_operationByUser_id", Gift_user_operationmap);		} catch (RuntimeException re) {			logger.error("findGift_user_operationByUser_id failed :{}", re);			throw re;		}	}	public List<Gift_user_operation> findGift_user_operationByUser_id_excel(			Integer user_id_c) {		Map Gift_user_operationmap_excel = new HashMap();		Gift_user_operationmap_excel.put("user_id_c", user_id_c);		try {			return this.getSqlSession().selectList(					"findGift_user_operationByUser_id_excel",					Gift_user_operationmap_excel);		} catch (RuntimeException re) {			logger.error("findGift_user_operationByUser_id_excel failed :{}",					re);			throw re;		}	}}