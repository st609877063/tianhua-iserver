package com.gift.dao.impl;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.ibatis.session.RowBounds;import org.mybatis.spring.support.SqlSessionDaoSupport;import org.springframework.stereotype.Repository;import com.gift.bean.Gift_user;import com.gift.common.CommonConstant;import com.gift.dao.Gift_userDAO;/** * @Repository @Service @Controller，它们分别对应存储层Bean，业务层Bean，和展示层Bean。 * @Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。 * @scope="prototype"来保证每一个请求有一个单独的Action来处理， 避免struts中Action的线程安全问题。 */@Repositorypublic class Gift_userDAOImpl extends SqlSessionDaoSupport implements		Gift_userDAO {		/**	 * 通过id查询实体	 * @throws Exception 	 */	public Gift_user findGift_userByUser_id(Integer user_id) throws Exception {		try {			//return queryBean("select * from gift_user where user_id=?", Gift_user.class, user_id);			return this.getSqlSession().selectOne("findGift_userByUser_id",user_id);		} catch (Exception e) {			logger.error("findGift_userByUser_id failed :{}", e);			e.printStackTrace();			throw e;		}	}	/**	 * 删除	 * @throws Exception 	 */	public void removeGift_user(Gift_user gift_user) throws Exception {		try {			//update("delete from gift_user where user_id=?", gift_user.getUser_id());			this.getSqlSession().delete("removeGift_user", gift_user);		} catch (Exception e) {			//logger.error("removeGift_user failed :{}", re);			e.printStackTrace();			throw e;		}	}	/**	 * 批量删除	 * @throws Exception 	 */	@Override	public void batch_removeGift_user(Integer[] batchId) throws Exception {		try {			Gift_user curr_gift_user = new Gift_user();			if(batchId!=null&&batchId.length>0){				for(Integer user_id:batchId){					curr_gift_user.setUser_id(user_id);					this.getSqlSession().delete("removeGift_user", curr_gift_user);				}			}		} catch (Exception e) {			e.printStackTrace();			throw e;		}	}		/**	 * 保存	 * @throws Exception 	 */	public void saveGift_user(Gift_user gift_user) throws Exception {		try {			//String delStr = "insert into gift_user(user_name,nick_name,password,user_img,user_title,user_type,user_admin,is_close,create_time,add_user_id) values (?,?,?,?,?,?,?,?,?,?)";			//update(delStr, user.getUser_name().trim(),user.getNick_name().trim(),user.getPassword(),user.getUser_img(),user.getUser_title().trim(),user.getUser_type(),user.getUser_admin(),user.getIs_close(),user.getCreate_time(),user.getAdd_user_id());			getSqlSession().insert("saveGift_user", gift_user);		} catch (Exception e) {			logger.error("saveGift_user failed :{}", e);			e.printStackTrace();			throw e;		}	}	/**	 * 更新	 * @throws Exception 	 */	public void updateGift_user(Gift_user gift_user) throws Exception {		try {			//String updateStr = "update gift_user set user_name=? ,nick_name=?,user_img=?,user_title=?,user_type=?,user_admin=?,is_close=? where user_id=?";			//update(updateStr, user.getUser_name().trim(),user.getNick_name().trim(),user.getUser_img(),user.getUser_title().trim(),user.getUser_type(),user.getUser_admin(),user.getIs_close(),user.getUser_id());			this.getSqlSession().update("updateGift_user", gift_user);		} catch (Exception e) {			logger.error("updateGift_user failed :{}", e);			e.printStackTrace();			throw e;		}	}	public List<Gift_user> findAllGift_user() {		try {			return this.getSqlSession().selectList("findAllGift_user");		} catch (RuntimeException re) {			logger.error("findAllGift_user failed :{}", re);			throw re;		}	}	@Override	public int checkUser(Gift_user gift_user) {		List<Gift_user> user_list = this.getSqlSession().selectList("findGift_userByUser_name",gift_user.getUser_name());		if(user_list!=null&&user_list.size()!=0){			for(Gift_user u:user_list){				if(u.getUser_id()!=gift_user.getUser_id()){					if(u.getUser_name().equals(gift_user.getUser_name())){						return CommonConstant.USER_NAME_EXIST;					}else if(u.getNick_name().equals(gift_user.getNick_name())){						return CommonConstant.USER_NICK_NAME_EXIST;					}				}			}		}		return CommonConstant.SUCCESS;	}	@Override	public int findAllGift_user_count() {		try {			return this.getSqlSession().selectOne("findAllGift_user_count");		} catch (RuntimeException re) {			logger.error("findAllGift_user_count failed :{}", re);			throw re;		}	}	@Override	public int findGift_userByKeyword_count(String keyword) {		try {			return this.getSqlSession().selectOne(					"findGift_userByKeyword_count", keyword);		} catch (RuntimeException re) {			logger.error("findGift_userByKeyword_count failed :{}", re);			throw re;		}	}	@Override	public List<Gift_user> findGift_userByKeyword(String keyword, int pageId,			int pageSize) {		Map<String,String> map = new HashMap<String,String>();		map.put("keyword", keyword);		try {			return this.getSqlSession().selectList("findGift_userByKeyword",					map, new RowBounds(pageId, pageSize));		} catch (RuntimeException re) {			logger.error("findGift_userByKeyword failed :{}", re);			throw re;		}	}}