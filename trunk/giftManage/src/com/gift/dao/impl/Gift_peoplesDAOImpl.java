package com.gift.dao.impl;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.ibatis.session.RowBounds;import org.mybatis.spring.support.SqlSessionDaoSupport;import org.springframework.stereotype.Repository;import com.gift.bean.Gift_peoples;import com.gift.dao.Gift_peoplesDAO;/** * @Repository @Service @Controller，它们分别对应存储层Bean，业务层Bean，和展示层Bean。 * @Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。 * @scope="prototype"来保证每一个请求有一个单独的Action来处理， 避免struts中Action的线程安全问题。 */@Repositorypublic class Gift_peoplesDAOImpl extends SqlSessionDaoSupport implements Gift_peoplesDAO{	@Override	public List<Gift_peoples> findGiftPeoplesByFlagPage(Integer p_flag, int pageId, int pageSize)	{		try		{			Map<String, Object> map = new HashMap<String, Object>();			map.put("p_flag", p_flag);			return this.getSqlSession().selectList("findGiftPeoplesByFlagPage", map, new RowBounds(pageId, pageSize));		}		catch (RuntimeException re)		{			logger.error("findGiftPeoplesByFlagPage failed :{}", re);			throw re;		}	}	@Override	public Gift_peoples findGiftPeoplesByID(Integer p_id) throws Exception	{		try		{			return this.getSqlSession().selectOne("findGiftPeoplesByID", p_id);		}		catch (Exception e)		{			logger.error("findGiftPeoplesByID failed :{}", e);			e.printStackTrace();			throw e;		}	}	@Override	public List<Gift_peoples> findGiftPeoplesByName(String p_name) throws Exception	{		try		{			return this.getSqlSession().selectList("findGiftPeoplesByName", p_name);		}		catch (RuntimeException re)		{			logger.error("findGiftPeoplesByName failed :{}", re);			throw re;		}	}	@Override	public void removeGiftPeoples(Gift_peoples gift_peoples) throws Exception	{		try		{			this.getSqlSession().delete("removeGiftPeoples", gift_peoples);		}		catch (Exception e)		{			logger.error("removeGiftPeoples failed :{}", e);			e.printStackTrace();			throw e;		}	}	@Override	public void saveGiftPeoples(Gift_peoples gift_peoples) throws Exception	{		try		{			getSqlSession().insert("saveGiftPeoples", gift_peoples);		}		catch (Exception e)		{			logger.error("saveGiftPeoples failed :{}", e);			e.printStackTrace();			throw e;		}	}	@Override	public void updateGiftPeoples(Gift_peoples gift_peoples) throws Exception	{		try		{			this.getSqlSession().update("updateGiftPeoples", gift_peoples);		}		catch (Exception e)		{			logger.error("updateGiftPeoples failed :{}", e);			e.printStackTrace();			throw e;		}	}	@Override	public void batchRemoveGiftPeople(Integer[] batchId) throws Exception	{		try		{		}		catch (Exception e)		{			e.printStackTrace();			throw e;		}	}	@Override	public int findGiftPeoplesByFlagCount(Integer p_flag)	{		try		{			Map<String, Object> map = new HashMap<String, Object>();			map.put("p_flag", p_flag);			return this.getSqlSession().selectOne("findGiftPeoplesByFlagCount", map);		}		catch (RuntimeException re)		{			logger.error("findGiftPeoplesByFlagCount failed :{}", re);			throw re;		}	}	@Override	public int findGiftPeoplesByKeywordCount(Integer p_flag, String keyword)	{		try		{			Map<String, Object> map = new HashMap<String, Object>();			map.put("keyword", keyword);			map.put("p_flag", p_flag);			return this.getSqlSession().selectOne("findGiftPeoplesByKeywordCount", map);		}		catch (RuntimeException re)		{			logger.error("findGiftPeoplesByKeywordCount failed :{}", re);			throw re;		}	}	@Override	public List<Gift_peoples> findGiftPeoplesByKeyword(Integer p_flag, String keyword, int pageId, int pageSize)	{		Map<String, Object> map = new HashMap<String, Object>();		map.put("keyword", keyword);		map.put("p_flag", p_flag);		try		{			return this.getSqlSession().selectList("findGiftPeoplesByKeyword", map, new RowBounds(pageId, pageSize));		}		catch (RuntimeException re)		{			logger.error("findGiftPeoplesByKeyword failed :{}", re);			throw re;		}	}	@Override	public List<Gift_peoples> findAllGiftPeoples()	{		try		{			return this.getSqlSession().selectList("findAllGiftPeoples");		}		catch (RuntimeException re)		{			logger.error("findAllGiftPeoples failed :{}", re);			throw re;		}	}	@Override	public List<Gift_peoples> findGiftPeoplesByFlag(int p_flag)	{		try		{			return this.getSqlSession().selectList("findGiftPeoplesByFlag", p_flag);		}		catch (RuntimeException re)		{			logger.error("findGiftPeoplesByFlag failed :{}", re);			throw re;		}	}}