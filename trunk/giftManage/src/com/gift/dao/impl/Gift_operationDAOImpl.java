package com.gift.dao.impl;import java.util.HashMap;import java.util.List;import java.util.Map;import org.mybatis.spring.support.SqlSessionDaoSupport;import org.springframework.stereotype.Repository;import com.gift.bean.Gift_operation;import com.gift.dao.Gift_operationDAO;/** * @Repository @Service @Controller，它们分别对应存储层Bean，业务层Bean，和展示层Bean。 * @Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。 * @scope="prototype"来保证每一个请求有一个单独的Action来处理， 避免struts中Action的线程安全问题。 */@Repository@SuppressWarnings({ "unchecked", "rawtypes" })public class Gift_operationDAOImpl extends SqlSessionDaoSupport implements		Gift_operationDAO {	public List<Gift_operation> findAllGift_operation() {		try {			return this.getSqlSession().selectList("findAllGift_operation");		} catch (RuntimeException re) {			logger.error("findAllGift_operation failed :{}", re);			throw re;		}	}	public Gift_operation findGift_operationByOper_id(Integer oper_id) {		try {			return this.getSqlSession().selectOne(					"findGift_operationByOper_id", oper_id);		} catch (RuntimeException re) {			logger.error("findGift_operationByOper_id failed :{}", re);			throw re;		}	}	public void removeGift_operation(Gift_operation gift_operation) {		try {			this.getSqlSession().delete("removeGift_operation", gift_operation);		} catch (RuntimeException re) {			logger.error("removeGift_operation failed :{}", re);			throw re;		}	}	public void saveGift_operation(Gift_operation gift_operation) {		try {			getSqlSession().insert("saveGift_operation", gift_operation);		} catch (RuntimeException re) {			logger.error("saveGift_operation failed :{}", re);			throw re;		}	}	public void updateGift_operation(Gift_operation gift_operation) {		try {			this.getSqlSession().update("updateGift_operation", gift_operation);		} catch (RuntimeException re) {			logger.error("updateGift_operation failed :{}", re);			throw re;		}	}	public int findGift_operationByOper_name_count(String oper_name_c) {		Map Gift_operationmap_count = new HashMap();		Gift_operationmap_count.put("oper_name_c", oper_name_c);		try {			return (Integer) this.getSqlSession().selectOne(					"findGift_operationByOper_name_count",					Gift_operationmap_count);		} catch (RuntimeException re) {			logger.error("findGift_operationByOper_name_count failed :{}", re);			throw re;		}	}	public List<Gift_operation> findGift_operationByOper_name(			String oper_name_c, int currentPage, int lineSize) {		Map Gift_operationmap = new HashMap();		Gift_operationmap.put("oper_name_c", oper_name_c);		Gift_operationmap.put("sartRow", ((currentPage - 1) * lineSize));		Gift_operationmap.put("endRow", currentPage * lineSize);		try {			return this.getSqlSession().selectList(					"findGift_operationByOper_name", Gift_operationmap);		} catch (RuntimeException re) {			logger.error("findGift_operationByOper_name failed :{}", re);			throw re;		}	}	public List<Gift_operation> findGift_operationByOper_name_excel(			String oper_name_c) {		Map Gift_operationmap_excel = new HashMap();		Gift_operationmap_excel.put("oper_name_c", oper_name_c);		try {			return this.getSqlSession().selectList(					"findGift_operationByOper_name_excel",					Gift_operationmap_excel);		} catch (RuntimeException re) {			logger.error("findGift_operationByOper_name_excel failed :{}", re);			throw re;		}	}}