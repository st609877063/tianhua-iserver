package com.gift.dao.impl;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.ibatis.session.RowBounds;import org.mybatis.spring.support.SqlSessionDaoSupport;import org.springframework.stereotype.Repository;import com.gift.bean.Gift_group_user;import com.gift.bean.Gift_user;import com.gift.dao.Gift_group_userDAO;/** * @Repository @Service @Controller，它们分别对应存储层Bean，业务层Bean，和展示层Bean。 * @Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。 * @scope="prototype"来保证每一个请求有一个单独的Action来处理， 避免struts中Action的线程安全问题。 */@Repositorypublic class Gift_group_userDAOImpl extends SqlSessionDaoSupport implements		Gift_group_userDAO {		/**	 * 查询实体	 */	@Override	public Gift_group_user findGift_group_userByGu_id(Integer gu_id) throws Exception {		try {			//return queryBean("select * from gift_group_user where gu_id=?", Gift_group_user.class, gu_id);			return this.getSqlSession().selectOne("findGift_group_userByGu_id",gu_id);		} catch (Exception e) {			logger.error("findGift_group_userByGu_id failed :{}", e);			e.printStackTrace();			throw e;		}	}		/**	 * 保存	 * @throws Exception 	 */	@Override	public void saveGift_group_user(Gift_group_user gift_group_user) throws Exception {		try{			//String insertStr = "insert into gift_group_user (group_id,user_id,add_time,add_user_id) values(?,?,?,?)";			//update(insertStr, gift_group_user.getGroup_id(),gift_group_user.getUser_id(),gift_group_user.getAdd_time(),gift_group_user.getAdd_user_id());			getSqlSession().insert("saveGift_group_user", gift_group_user);		}catch(Exception e){			logger.error("saveGift_group_user failed :{}", e);			e.printStackTrace();			throw e;		}	}		/**	 * 更新	 */	@Override	public void updateGift_group_user(Gift_group_user gift_group_user) throws Exception {		try{			//String updateStr = "update gift_group_user set group_id=? ,user_id=?,add_time=?,add_user_id=? where gu_id=?";			//update(updateStr, gift_group_user.getGroup_id(),gift_group_user.getUser_id(),gift_group_user.getAdd_time(),gift_group_user.getAdd_user_id(),gift_group_user.getGu_id());			getSqlSession().update("updateGift_group_user", gift_group_user);		}catch(Exception e){			logger.error("updateGift_group_user failed :{}", e);			e.printStackTrace();			throw e;		}	}		/**	 * 删除	 * @throws Exception 	 */	@Override	public void removeGift_group_user(Gift_group_user gift_group_user) throws Exception {		try{			getSqlSession().delete("removeGift_group_user", gift_group_user);		}catch(Exception e){			e.printStackTrace();			throw e;		}	}	@Override	public int findAllGift_group_user_count() {		try {			return this.getSqlSession().selectOne("findAllGift_group_user_count");		} catch (RuntimeException re) {			logger.error("findAllGift_group_user_count failed :{}", re);			throw re;		}	}	@Override	public List<Gift_group_user> findAllGift_group_user(int pageId,int pageSize) {		try {			return this.getSqlSession().selectList("findAllGift_group_user",null,new RowBounds(pageId, pageSize));		} catch (RuntimeException re) {			logger.error("findAllGift_group_user failed :{}", re);			throw re;		}	}		@Override	public int findGift_group_userByKeyword_count(String keyword) {		try {			return this.getSqlSession().selectOne(					"findGift_group_userByKeyword_count", keyword);		} catch (RuntimeException re) {			logger.error("findGift_group_userByKeyword_count failed :{}", re);			throw re;		}	}	@Override	public List<Gift_group_user> findGift_group_userByKeyword(String keyword,			int pageId, int pageSize) {		Map<String,String> map = new HashMap<String,String>();		map.put("keyword", keyword);		try {			return this.getSqlSession().selectList("findGift_group_userByKeyword",					map, new RowBounds(pageId, pageSize));		} catch (RuntimeException re) {			logger.error("findGift_group_userByKeyword failed :{}", re);			throw re;		}	}	@Override	public Gift_group_user findGift_group_userById(Integer gu_id) {		try {			return this.getSqlSession().selectOne("findGift_group_userById",					gu_id);		} catch (RuntimeException re) {			logger.error("findGift_group_userById failed :{}", re);			throw re;		}	}	@Override	public List<Gift_group_user> findGift_group_userByUser(Gift_user gift_user) {		try {			Integer user_id=gift_user.getUser_id();			return this.getSqlSession().selectList("findGift_group_userByUser",					user_id);		} catch (RuntimeException re) {			logger.error("findGift_group_userByUser failed :{}", re);			throw re;		}	}	@Override	public void removeGift_group_userByUser(Gift_user gift_user) {		try{			Integer user_id=gift_user.getUser_id();			getSqlSession().delete("removeGift_group_userByUser",user_id);		}catch (RuntimeException re) {			logger.error("removeGift_group_userByUser failed :{}", re);			throw re;		}	}}