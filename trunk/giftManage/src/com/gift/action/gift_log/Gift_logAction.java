package com.gift.action.gift_log;import java.io.ByteArrayOutputStream;import java.io.InputStream;import java.io.PrintStream;import java.util.Map;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import org.apache.log4j.Logger;import org.apache.struts2.ServletActionContext;import org.springframework.stereotype.Controller;import com.gift.action.BaseAction;import com.gift.bean.Gift_log;import com.gift.service.Gift_logService;import com.opensymphony.xwork2.ActionContext;@Controller@SuppressWarnings({ "unchecked", "rawtypes" })public class Gift_logAction extends BaseAction {	private static final long serialVersionUID = 1L;	private Gift_logService service;	private Gift_log gift_log;	private String log_content_c;	// 调用分页默认值	int currentPage = 1; // 定义没页要显示的记录数	int lineSize = 10; // 总记录数 / 每页显示的记录数	int allRecorders;	public Gift_logService getService() {		return service;	}	@Resource(name = "gift_logServiceImpl")	public void setService(Gift_logService service) {		this.service = service;	}	public Gift_log getGift_log() {		return gift_log;	}	public void setGift_log(Gift_log gift_log) {		this.gift_log = gift_log;	}	public int getCurrentPage() {		return currentPage;	}	public void setCurrentPage(int currentPage) {		this.currentPage = currentPage;	}	public String getLog_content_c() {		return log_content_c;	}	public void setLog_content_c(String log_content_c) {		HttpServletRequest request = ServletActionContext.getRequest();		if (request.getMethod().equals("POST")) {			this.log_content_c = log_content_c;		} else {			try {				this.log_content_c = log_content_c;			} catch (Exception e) {			}		}	}	public String list() throws Exception {		Map request = (Map) ActionContext.getContext().get("request");		request.put("list", service.findAll());		return "listsuccess";	}	public String saveP() throws Exception {		return "saveP";	}	public String save() throws Exception {		try {			this.service.save(this.gift_log);			return "savesuccess";		} catch (Exception e) {			ByteArrayOutputStream msg = new ByteArrayOutputStream();			e.printStackTrace(new PrintStream(msg));			addActionError("保存出错,堆栈信息如下:</BR>" + msg.toString());			Logger logger = Logger.getLogger(this.getClass());			logger.error("programe error !gift_logsaveAction.java "); // 写到日志文件																		// C:\\log4j_error.log																		// 中			return "saveerror";		}	}	public String updateP() throws Exception {		gift_log = this.service.findByLog_id(gift_log.getLog_id());		return "updateP";	}	public String update() throws Exception {		try {			this.service.update(this.gift_log);			return "updatesuccess";		} catch (Exception e) {			ByteArrayOutputStream msg = new ByteArrayOutputStream();			e.printStackTrace(new PrintStream(msg));			addActionError("保存出错,堆栈信息如下:</BR>" + msg.toString());			Logger logger = Logger.getLogger(this.getClass());			logger.error("programe error !gift_logupdateAction.java "); // 写到日志文件																		// C:\\log4j_error.log																		// 中			return "updateerror";		}	}	public String remove() throws Exception {		this.service.delete(gift_log);		return "removesuccess";	}	public String listByLog_content() throws Exception {		Map request = (Map) ActionContext.getContext().get("request");		if (this.getLog_content_c().equals("")) {			request.put("list", service.findAll());		} else {			allRecorders = service.findGift_logByLog_content_count(this					.getLog_content_c());			request.put("currentPage", new Integer(currentPage)); // 当前页			request.put("allRecorders", new Integer(allRecorders));// 总记录总数			request.put("list", service.findGift_logByLog_content(					this.getLog_content_c(), this.getCurrentPage(), lineSize));		}		return "listByLog_content";	}	public InputStream getDownloadFile() {		return this.service.getInputStream(this.getLog_content_c());	}	public String generateExcel() throws Exception {		return "generateExcel";	}}