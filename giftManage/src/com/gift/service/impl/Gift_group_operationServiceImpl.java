package com.gift.service.impl;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.InputStream;import java.io.OutputStream;import java.util.List;import javax.annotation.Resource;import org.apache.poi.hssf.usermodel.HSSFCell;import org.apache.poi.hssf.usermodel.HSSFRow;import org.apache.poi.hssf.usermodel.HSSFSheet;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import com.gift.bean.Gift_group_operation;import com.gift.dao.Gift_group_operationDAO;import com.gift.service.Gift_group_operationService;/** * @Repository @Service @Controller，它们分别对应存储层Bean，业务层Bean，和展示层Bean。 * @Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。 * @scope="prototype"来保证每一个请求有一个单独的Action来处理， 避免struts中Action的线程安全问题。 */@Servicepublic class Gift_group_operationServiceImpl implements		Gift_group_operationService {	private Gift_group_operationDAO gift_group_operationDao;	public Gift_group_operationDAO getGift_group_operationDao() {		return gift_group_operationDao;	}	@Resource(name = "gift_group_operationDAOImpl")	public void setGift_group_operationDao(			Gift_group_operationDAO gift_group_operationDao) {		this.gift_group_operationDao = gift_group_operationDao;	}	@Transactional	public void delete(Gift_group_operation gift_group_operation) {		this.gift_group_operationDao				.removeGift_group_operation(gift_group_operation);	}	public List<Gift_group_operation> findAll() {		return this.gift_group_operationDao.findAllGift_group_operation();	}	public Gift_group_operation findByGo_id(Integer go_id) {		return this.gift_group_operationDao				.findGift_group_operationByGo_id(go_id);	}	@Transactional	public void save(Gift_group_operation gift_group_operation) {		this.gift_group_operationDao				.saveGift_group_operation(gift_group_operation);	}	@Transactional	public void update(Gift_group_operation gift_group_operation) {		this.gift_group_operationDao				.updateGift_group_operation(gift_group_operation);	}	public int findGift_group_operationByGroup_id_count(Integer group_id_c) {		return this.gift_group_operationDao				.findGift_group_operationByGroup_id_count(group_id_c);	}	public List<Gift_group_operation> findGift_group_operationByGroup_id(			Integer group_id_c, int currentPage, int lineSize) {		return this.gift_group_operationDao.findGift_group_operationByGroup_id(				group_id_c, currentPage, lineSize);	}	public List<Gift_group_operation> findGift_group_operationByGroup_id_excel(			Integer group_id_c) {		return this.gift_group_operationDao				.findGift_group_operationByGroup_id_excel(group_id_c);	}	@SuppressWarnings("deprecation")	public InputStream getInputStream(Integer group_id_c) {		HSSFWorkbook wb = new HSSFWorkbook();		HSSFSheet sheet = wb.createSheet("RecordsSheet");		HSSFRow row = sheet.createRow(0);		HSSFCell cell = row.createCell((short) 0);		cell.setCellValue("go_id");		cell = row.createCell((short) 1);		cell.setCellValue("group_id");		cell = row.createCell((short) 2);		cell.setCellValue("oper_id");		cell = row.createCell((short) 3);		cell.setCellValue("add_time");		cell = row.createCell((short) 4);		cell.setCellValue("add_user_id");		List<Gift_group_operation> list;		if (group_id_c.equals("")) {			list = this.findAll();		} else {			list = this.findGift_group_operationByGroup_id_excel(group_id_c);		}		for (int i = 0; i < list.size(); ++i) {			Gift_group_operation gift_group_operation = list.get(i);			row = sheet.createRow(i + 1);			cell = row.createCell((short) 0);			if (gift_group_operation.getGo_id() != null) {				cell.setCellValue(gift_group_operation.getGo_id());			} else {				cell.setCellValue("");			}			cell = row.createCell((short) 1);			if (gift_group_operation.getGroup_id() != null) {				cell.setCellValue(gift_group_operation.getGroup_id());			} else {				cell.setCellValue("");			}			cell = row.createCell((short) 2);			if (gift_group_operation.getOper_id() != null) {				cell.setCellValue(gift_group_operation.getOper_id());			} else {				cell.setCellValue("");			}			cell = row.createCell((short) 3);			if (gift_group_operation.getAdd_time() != null) {				cell.setCellValue(gift_group_operation.getAdd_time());			} else {				cell.setCellValue("");			}			cell = row.createCell((short) 4);			if (gift_group_operation.getAdd_user_id() != null) {				cell.setCellValue(gift_group_operation.getAdd_user_id());			} else {				cell.setCellValue("");			}		}		File file = new File("test.xls");		try {			OutputStream os = new FileOutputStream(file);			wb.write(os);			os.close();		} catch (Exception e) {			e.printStackTrace();		}		InputStream is = null;		try {			is = new FileInputStream(file);		} catch (FileNotFoundException e) {			e.printStackTrace();		}		return is;	}}