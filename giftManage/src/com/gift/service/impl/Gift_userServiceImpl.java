package com.gift.service.impl;import java.util.List;import javax.annotation.Resource;import org.apache.commons.lang.StringUtils;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import com.gift.bean.Gift_group_user;import com.gift.bean.Gift_user;import com.gift.dao.Gift_group_userDAO;import com.gift.dao.Gift_userDAO;import com.gift.service.Gift_userService;/** * @Repository @Service @Controller，它们分别对应存储层Bean，业务层Bean，和展示层Bean。 * @Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。 * @scope="prototype"来保证每一个请求有一个单独的Action来处理， 避免struts中Action的线程安全问题。 */@Servicepublic class Gift_userServiceImpl implements Gift_userService {	@Resource(name = "gift_userDAOImpl")	private Gift_userDAO gift_userDao;	@Resource(name = "gift_group_userDAOImpl")	private Gift_group_userDAO gift_guDao;	@Transactional	public void delete(Gift_user gift_user) throws Exception {		gift_userDao.removeGift_user(gift_user);		gift_guDao.removeGift_group_userByUser(gift_user);	}	public Gift_user findById(Integer user_id) throws Exception {		return this.gift_userDao.findGift_userByUser_id(user_id);	}	@Transactional	public void save(Gift_user gift_user) throws Exception {		gift_userDao.saveGift_user(gift_user);		//保存用户组关系		if(StringUtils.isNotBlank(gift_user.getGroupIdStr())){			String[] gIdArr = gift_user.getGroupIdStr().split("#");			if(gIdArr!=null&&gIdArr.length>0){				for(String group_id:gIdArr){					Gift_group_user gu = new Gift_group_user();					gu.setGroup_id(Integer.parseInt(group_id));					gu.setUser_id(gift_user.getUser_id());					gu.setAdd_time(gift_user.getCreate_time());					gu.setAdd_user_id(gift_user.getAdd_user_id());					gift_guDao.saveGift_group_user(gu);				}			}		}			}	@Transactional	public void update(Gift_user gift_user) throws Exception {		//更新用户组关系		//删除旧的		gift_guDao.removeGift_group_userByUser(gift_user);		//插入新的		if(StringUtils.isNotBlank(gift_user.getGroupIdStr())){			String[] gIdArr = gift_user.getGroupIdStr().split("#");			if(gIdArr!=null&&gIdArr.length>0){				for(String group_id:gIdArr){					Gift_group_user gu = new Gift_group_user();					gu.setGroup_id(Integer.parseInt(group_id));					gu.setUser_id(gift_user.getUser_id());					gu.setAdd_time(gift_user.getCreate_time());					gu.setAdd_user_id(gift_user.getAdd_user_id());					gift_guDao.saveGift_group_user(gu);				}			}		}		gift_userDao.updateGift_user(gift_user);	}		@Override	public int checkUser(Gift_user gift_user) {		return gift_userDao.checkUser(gift_user);	}		@Override	public void batch_delete(Integer[] batchId) throws Exception {		gift_userDao.batch_removeGift_user(batchId);	}		public Gift_userDAO getGift_userDao() {		return gift_userDao;	}		public void setGift_userDao(Gift_userDAO gift_userDao) {		this.gift_userDao = gift_userDao;	}	@Override	public int findByKeyword_count(String keyword) {		return this.gift_userDao.findGift_userByKeyword_count(keyword);	}	@Override	public List<Gift_user> findByKeyword(String keyword, int pageId, int pageSize) {		return this.gift_userDao.findGift_userByKeyword(keyword,pageId,pageSize);	}	@Override	public int findAll_count() {		return this.gift_userDao.findAllGift_user_count();	}	@Override	public List<Gift_user> findAll() {		return this.gift_userDao.findAllGift_user();	}	public void setGift_guDao(Gift_group_userDAO gift_guDao) {		this.gift_guDao = gift_guDao;	}	public Gift_group_userDAO getGift_guDao() {		return gift_guDao;	}		}