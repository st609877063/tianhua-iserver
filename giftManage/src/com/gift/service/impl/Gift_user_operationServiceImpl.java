package com.gift.service.impl;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.InputStream;import java.io.OutputStream;import java.util.List;import javax.annotation.Resource;import org.apache.poi.hssf.usermodel.HSSFCell;import org.apache.poi.hssf.usermodel.HSSFRow;import org.apache.poi.hssf.usermodel.HSSFSheet;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import com.gift.bean.Gift_user_operation;import com.gift.dao.Gift_user_operationDAO;import com.gift.service.Gift_user_operationService;/** * @Repository @Service @Controller，它们分别对应存储层Bean，业务层Bean，和展示层Bean。 * @Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。 * @scope="prototype"来保证每一个请求有一个单独的Action来处理， 避免struts中Action的线程安全问题。 */@Servicepublic class Gift_user_operationServiceImpl implements		Gift_user_operationService {	private Gift_user_operationDAO gift_user_operationDao;	public Gift_user_operationDAO getGift_user_operationDao() {		return gift_user_operationDao;	}	@Resource(name = "gift_user_operationDAOImpl")	public void setGift_user_operationDao(			Gift_user_operationDAO gift_user_operationDao) {		this.gift_user_operationDao = gift_user_operationDao;	}	@Transactional	public void delete(Gift_user_operation gift_user_operation) {		this.gift_user_operationDao				.removeGift_user_operation(gift_user_operation);	}	public List<Gift_user_operation> findAll() {		return this.gift_user_operationDao.findAllGift_user_operation();	}	public Gift_user_operation findByUo_id(Integer uo_id) {		return this.gift_user_operationDao				.findGift_user_operationByUo_id(uo_id);	}	@Transactional	public void save(Gift_user_operation gift_user_operation) {		this.gift_user_operationDao				.saveGift_user_operation(gift_user_operation);	}	@Transactional	public void update(Gift_user_operation gift_user_operation) {		this.gift_user_operationDao				.updateGift_user_operation(gift_user_operation);	}	public int findGift_user_operationByUser_id_count(Integer user_id_c) {		return this.gift_user_operationDao				.findGift_user_operationByUser_id_count(user_id_c);	}	public List<Gift_user_operation> findGift_user_operationByUser_id(			Integer user_id_c, int currentPage, int lineSize) {		return this.gift_user_operationDao.findGift_user_operationByUser_id(				user_id_c, currentPage, lineSize);	}	public List<Gift_user_operation> findGift_user_operationByUser_id_excel(			Integer user_id_c) {		return this.gift_user_operationDao				.findGift_user_operationByUser_id_excel(user_id_c);	}	@SuppressWarnings("deprecation")	public InputStream getInputStream(Integer user_id_c) {		HSSFWorkbook wb = new HSSFWorkbook();		HSSFSheet sheet = wb.createSheet("RecordsSheet");		HSSFRow row = sheet.createRow(0);		HSSFCell cell = row.createCell((short) 0);		cell.setCellValue("uo_id");		cell = row.createCell((short) 1);		cell.setCellValue("user_id");		cell = row.createCell((short) 2);		cell.setCellValue("oper_id");		cell = row.createCell((short) 3);		cell.setCellValue("add_time");		cell = row.createCell((short) 4);		cell.setCellValue("add_user_id");		List<Gift_user_operation> list;		if (user_id_c.equals("")) {			list = this.findAll();		} else {			list = this.findGift_user_operationByUser_id_excel(user_id_c);		}		for (int i = 0; i < list.size(); ++i) {			Gift_user_operation gift_user_operation = list.get(i);			row = sheet.createRow(i + 1);			cell = row.createCell((short) 0);			if (gift_user_operation.getUo_id() != null) {				cell.setCellValue(gift_user_operation.getUo_id());			} else {				cell.setCellValue("");			}			cell = row.createCell((short) 1);			if (gift_user_operation.getUser_id() != null) {				cell.setCellValue(gift_user_operation.getUser_id());			} else {				cell.setCellValue("");			}			cell = row.createCell((short) 2);			if (gift_user_operation.getOper_id() != null) {				cell.setCellValue(gift_user_operation.getOper_id());			} else {				cell.setCellValue("");			}			cell = row.createCell((short) 3);			if (gift_user_operation.getAdd_time() != null) {				cell.setCellValue(gift_user_operation.getAdd_time());			} else {				cell.setCellValue("");			}			cell = row.createCell((short) 4);			if (gift_user_operation.getAdd_user_id() != null) {				cell.setCellValue(gift_user_operation.getAdd_user_id());			} else {				cell.setCellValue("");			}		}		File file = new File("test.xls");		try {			OutputStream os = new FileOutputStream(file);			wb.write(os);			os.close();		} catch (Exception e) {			e.printStackTrace();		}		InputStream is = null;		try {			is = new FileInputStream(file);		} catch (FileNotFoundException e) {			e.printStackTrace();		}		return is;	}}