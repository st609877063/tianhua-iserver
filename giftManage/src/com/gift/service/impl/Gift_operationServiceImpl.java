package com.gift.service.impl;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.InputStream;import java.io.OutputStream;import java.util.List;import javax.annotation.Resource;import org.apache.poi.hssf.usermodel.HSSFCell;import org.apache.poi.hssf.usermodel.HSSFRow;import org.apache.poi.hssf.usermodel.HSSFSheet;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import com.gift.bean.Gift_operation;import com.gift.dao.Gift_operationDAO;import com.gift.service.Gift_operationService;/** * @Repository @Service @Controller，它们分别对应存储层Bean，业务层Bean，和展示层Bean。 * @Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。 * @scope="prototype"来保证每一个请求有一个单独的Action来处理， 避免struts中Action的线程安全问题。 */@Servicepublic class Gift_operationServiceImpl implements Gift_operationService {	private Gift_operationDAO gift_operationDao;	public Gift_operationDAO getGift_operationDao() {		return gift_operationDao;	}	@Resource(name = "gift_operationDAOImpl")	public void setGift_operationDao(Gift_operationDAO gift_operationDao) {		this.gift_operationDao = gift_operationDao;	}	@Transactional	public void delete(Gift_operation gift_operation) {		this.gift_operationDao.removeGift_operation(gift_operation);	}	public List<Gift_operation> findAll() {		return this.gift_operationDao.findAllGift_operation();	}	public Gift_operation findByOper_id(Integer oper_id) {		return this.gift_operationDao.findGift_operationByOper_id(oper_id);	}	@Transactional	public void save(Gift_operation gift_operation) {		this.gift_operationDao.saveGift_operation(gift_operation);	}	@Transactional	public void update(Gift_operation gift_operation) {		this.gift_operationDao.updateGift_operation(gift_operation);	}	public int findGift_operationByOper_name_count(String oper_name_c) {		return this.gift_operationDao				.findGift_operationByOper_name_count(oper_name_c);	}	public List<Gift_operation> findGift_operationByOper_name(			String oper_name_c, int currentPage, int lineSize) {		return this.gift_operationDao.findGift_operationByOper_name(				oper_name_c, currentPage, lineSize);	}	public List<Gift_operation> findGift_operationByOper_name_excel(			String oper_name_c) {		return this.gift_operationDao				.findGift_operationByOper_name_excel(oper_name_c);	}	@SuppressWarnings("deprecation")	public InputStream getInputStream(String oper_name_c) {		HSSFWorkbook wb = new HSSFWorkbook();		HSSFSheet sheet = wb.createSheet("RecordsSheet");		HSSFRow row = sheet.createRow(0);		HSSFCell cell = row.createCell((short) 0);		cell.setCellValue("oper_id");		cell = row.createCell((short) 1);		cell.setCellValue("oper_name");		cell = row.createCell((short) 2);		cell.setCellValue("oper_parent");		cell = row.createCell((short) 3);		cell.setCellValue("oper_uri");		cell = row.createCell((short) 4);		cell.setCellValue("create_time");		cell = row.createCell((short) 5);		cell.setCellValue("add_user_id");		List<Gift_operation> list;		if (oper_name_c.equals("")) {			list = this.findAll();		} else {			list = this.findGift_operationByOper_name_excel(oper_name_c);		}		for (int i = 0; i < list.size(); ++i) {			Gift_operation gift_operation = list.get(i);			row = sheet.createRow(i + 1);			cell = row.createCell((short) 0);			if (gift_operation.getOper_id() != null) {				cell.setCellValue(gift_operation.getOper_id());			} else {				cell.setCellValue("");			}			cell = row.createCell((short) 1);			if (gift_operation.getOper_name() != null) {				cell.setCellValue(gift_operation.getOper_name());			} else {				cell.setCellValue("");			}			cell = row.createCell((short) 2);			if (gift_operation.getOper_parent() != null) {				cell.setCellValue(gift_operation.getOper_parent());			} else {				cell.setCellValue("");			}			cell = row.createCell((short) 3);			if (gift_operation.getOper_uri() != null) {				cell.setCellValue(gift_operation.getOper_uri());			} else {				cell.setCellValue("");			}			cell = row.createCell((short) 4);			if (gift_operation.getCreate_time() != null) {				cell.setCellValue(gift_operation.getCreate_time());			} else {				cell.setCellValue("");			}			cell = row.createCell((short) 5);			if (gift_operation.getAdd_user_id() != null) {				cell.setCellValue(gift_operation.getAdd_user_id());			} else {				cell.setCellValue("");			}		}		File file = new File("test.xls");		try {			OutputStream os = new FileOutputStream(file);			wb.write(os);			os.close();		} catch (Exception e) {			e.printStackTrace();		}		InputStream is = null;		try {			is = new FileInputStream(file);		} catch (FileNotFoundException e) {			e.printStackTrace();		}		return is;	}}