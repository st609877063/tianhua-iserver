package com.gift.dao.impl;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.ibatis.session.RowBounds;import org.mybatis.spring.support.SqlSessionDaoSupport;import org.springframework.stereotype.Repository;import com.gift.bean.Gift_group;import com.gift.dao.Gift_groupDAO;/** * @Repository @Service @Controller，它们分别对应存储层Bean，业务层Bean，和展示层Bean。 * @Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。 * @scope="prototype"来保证每一个请求有一个单独的Action来处理， 避免struts中Action的线程安全问题。 */@Repositorypublic class Gift_groupDAOImpl extends SqlSessionDaoSupport implements		Gift_groupDAO {		/**	 * 查询实体	 * @throws Exception 	 */	public Gift_group findGift_groupByGroup_id(Integer group_id) throws Exception {		try {			return this.getSqlSession().selectOne("findGift_groupByGroup_id",group_id);			//return queryBean("select * from gift_group where group_id=?", Gift_group.class, group_id);		} catch (Exception e) {			logger.error("findGift_groupByGroup_id failed :{}", e);			e.printStackTrace();			throw e;		}	}		/**	 * 保存	 * @throws Exception 	 */	public void saveGift_group(Gift_group gift_group) throws Exception {		try{			/*String insertStr = "insert into gift_group (group_name,group_parent,group_desc,create_time,add_user_id) values(?,?,?,?,?)";			update(insertStr, 					gift_group.getGroup_name().trim(),					gift_group.getGroup_parent().trim(),					gift_group.getGroup_desc().trim(),					gift_group.getCreate_time(),					gift_group.getAdd_user_id());*/			getSqlSession().insert("saveGift_group", gift_group);		}catch(Exception e){			logger.error("saveGift_group failed :{}", e);			e.printStackTrace();			throw e;		}	}		/**	 * 更新	 * @throws Exception 	 */	public void updateGift_group(Gift_group gift_group) throws Exception {		try{		/*	String updateStr = "update gift_group set group_name=?,group_parent=?,group_desc=? where group_id = ?";			update(updateStr, 					gift_group.getGroup_name().trim(),					gift_group.getGroup_parent().trim(),					gift_group.getGroup_desc().trim(),					gift_group.getGroup_id());*/			this.getSqlSession().update("updateGift_group", gift_group);		}catch(Exception e){			logger.error("updateGift_user failed :{}", e);			e.printStackTrace();			throw e;		}	}		/**	 * 删除	 * @throws Exception 	 */	public void removeGift_group(Gift_group gift_group) throws Exception {		try{			//String delStr = "delete from gift_group where group_id = ?";			getSqlSession().delete("removeGift_group", gift_group);		}catch(Exception e){			e.printStackTrace();			throw e;		}	}	@Override	public List<Gift_group> findGift_groupByGroup_name(String group_name) throws Exception {		try {			//return queryBeanList("select * from gift_group where group_name=?", Gift_group.class,group_name.trim());			return this.getSqlSession().selectList("findGift_groupByGroup_name",group_name);		} catch (Exception e) {			e.printStackTrace();			throw e;		}			}	@Override	public void batch_removeGift_group(Integer[] batchId) throws Exception {		try {			try {				Gift_group curr_gift_group = new Gift_group();				if(batchId!=null&&batchId.length>0){					for(Integer user_id:batchId){						curr_gift_group.setGroup_id(user_id);						this.getSqlSession().delete("removeGift_group", curr_gift_group);					}				}			} catch (Exception e) {				e.printStackTrace();				throw e;			}		} catch (Exception e) {			e.printStackTrace();			throw e;		}			}	@Override	public List<Gift_group> findAllGift_group() {		return this.getSqlSession().selectList("findAllGift_group");	}	@Override	public int findAllGift_group_count() {		return this.getSqlSession().selectOne("findAllGift_group_count");	}	@Override	public List<Gift_group> findGift_groupByKeyword(String keyword,			int pageId, int pageSize) {		Map<String,String> map = new HashMap<String,String>();		map.put("keyword", keyword);		try {			return this.getSqlSession().selectList("findGift_groupByKeyword",					map, new RowBounds(pageId, pageSize));		} catch (RuntimeException re) {			logger.error("findGift_groupByKeyword failed :{}", re);			throw re;		}	}	@Override	public int findGift_groupByKeyword_count(String keyword) {		try {			return this.getSqlSession().selectOne(					"findGift_groupByKeyword_count", keyword);		} catch (RuntimeException re) {			logger.error("findGift_groupByKeyword_count failed :{}", re);			throw re;		}	}	@Override	public List<Gift_group> findGift_groupByUserId(Integer user_id) {		return this.getSqlSession().selectList("findGift_groupByUserId",user_id);	}}