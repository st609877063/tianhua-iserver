package com.gift.dao.impl;import java.util.HashMap;import java.util.List;import java.util.Map;import org.mybatis.spring.support.SqlSessionDaoSupport;import org.springframework.stereotype.Repository;import com.gift.bean.Gift_log;import com.gift.dao.Gift_logDAO;/** * @Repository @Service @Controller，它们分别对应存储层Bean，业务层Bean，和展示层Bean。 * @Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。 * @scope="prototype"来保证每一个请求有一个单独的Action来处理， 避免struts中Action的线程安全问题。 */@Repository@SuppressWarnings({ "unchecked", "rawtypes" })public class Gift_logDAOImpl extends SqlSessionDaoSupport implements		Gift_logDAO {	public List<Gift_log> findAllGift_log() {		try {			return this.getSqlSession().selectList("findAllGift_log");		} catch (RuntimeException re) {			logger.error("findAllGift_user failed :{}", re);			throw re;		}	}	public Gift_log findGift_logByLog_id(Integer log_id) {		try {			return this.getSqlSession().selectOne("findGift_logByLog_id",					log_id);		} catch (RuntimeException re) {			logger.error("findGift_userByUser_id failed :{}", re);			throw re;		}	}	public void removeGift_log(Gift_log gift_log) {		try {			this.getSqlSession().delete("removeGift_log", gift_log);		} catch (RuntimeException re) {			logger.error("removeGift_log failed :{}", re);			throw re;		}	}	public void saveGift_log(Gift_log gift_log) {		try {			getSqlSession().insert("saveGift_log", gift_log);		} catch (RuntimeException re) {			logger.error("saveGift_log failed :{}", re);			throw re;		}	}	public void updateGift_log(Gift_log gift_log) {		try {			this.getSqlSession().update("updateGift_log", gift_log);		} catch (RuntimeException re) {			logger.error("updateGift_log failed :{}", re);			throw re;		}	}	public int findGift_logByLog_content_count(String log_content_c) {		Map Gift_logmap_count = new HashMap();		Gift_logmap_count.put("log_content_c", log_content_c);		try {			return (Integer) this.getSqlSession().selectOne(					"findGift_logByLog_content_count", Gift_logmap_count);		} catch (RuntimeException re) {			logger.error("findGift_logByLog_content_count failed :{}", re);			throw re;		}	}	public List<Gift_log> findGift_logByLog_content(String log_content_c,			int currentPage, int lineSize) {		Map Gift_logmap = new HashMap();		Gift_logmap.put("log_content_c", log_content_c);		Gift_logmap.put("sartRow", ((currentPage - 1) * lineSize));		Gift_logmap.put("endRow", currentPage * lineSize);		try {			return this.getSqlSession().selectList("findGift_logByLog_content",					Gift_logmap);		} catch (RuntimeException re) {			logger.error("findGift_logByLog_content failed :{}", re);			throw re;		}	}	public List<Gift_log> findGift_logByLog_content_excel(String log_content_c) {		Map Gift_logmap_excel = new HashMap();		Gift_logmap_excel.put("log_content_c", log_content_c);		try {			return this.getSqlSession().selectList(					"findGift_logByLog_content_excel", Gift_logmap_excel);		} catch (RuntimeException re) {			logger.error("findGift_logByLog_content_excel failed :{}", re);			throw re;		}	}}