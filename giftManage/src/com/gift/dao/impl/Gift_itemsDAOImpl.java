package com.gift.dao.impl;import java.util.List;import java.util.Map;import org.apache.ibatis.session.RowBounds;import org.mybatis.spring.support.SqlSessionDaoSupport;import org.springframework.stereotype.Repository;import com.gift.bean.Gift_items;import com.gift.dao.Gift_itemsDAO;/** * @Repository @Service @Controller，它们分别对应存储层Bean，业务层Bean，和展示层Bean。 * @Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。 * @scope="prototype"来保证每一个请求有一个单独的Action来处理， 避免struts中Action的线程安全问题。 */@Repository@SuppressWarnings("rawtypes")public class Gift_itemsDAOImpl extends SqlSessionDaoSupport		implements			Gift_itemsDAO {	public List<Gift_items> findAllGiftItems() {		try {			return this.getSqlSession().selectList("findAllGiftItems");		} catch (RuntimeException re) {			logger.error("findAllGiftItems failed :{}", re);			throw re;		}	}	public List<Gift_items> findItemsByKeyword(Map searchMap, int pageId,			int pageSize) {		try {			return this.getSqlSession().selectList("findItemsByKeyword",					searchMap, new RowBounds(pageId, pageSize));		} catch (RuntimeException re) {			logger.error("findItemsByKeyword failed :{}", re);			throw re;		}	}	public int findItemsCountByKeyword(Map searchMap) {		try {			return this.getSqlSession().selectOne("findItemsCountByKeyword",					searchMap);		} catch (RuntimeException re) {			logger.error("findItemsCountByKeyword failed :{}", re);			throw re;		}	}	public Gift_items findGiftItemsByItemNo(String i_no) {		try {			return this.getSqlSession()					.selectOne("findGiftItemsByItemNo", i_no);		} catch (RuntimeException re) {			logger.error("findGiftItemsByItemNo failed :{}", re);			throw re;		}	}	public Gift_items findGiftItemsById(int i_id) {		try {			return this.getSqlSession().selectOne("findGiftItemsById", i_id);		} catch (RuntimeException re) {			logger.error("findGiftItemsById failed :{}", re);			throw re;		}	}	public int removeGiftItems(Gift_items giftItems) {		try {			return this.getSqlSession().delete("removeGiftItems", giftItems);		} catch (RuntimeException re) {			logger.error("removeGiftItems failed :{}", re);			throw re;		}	}	public int saveGiftItems(Gift_items giftItems) {		try {			this.getSqlSession().insert("saveGiftItems", giftItems);			return giftItems.getI_id();		} catch (RuntimeException re) {			logger.error("saveGiftItems failed :{}", re);			throw re;		}	}	public void updateGiftItems(Gift_items giftItems) {		try {			this.getSqlSession().update("updateGiftItems", giftItems);		} catch (RuntimeException re) {			logger.error("updateGiftItems failed :{}", re);			throw re;		}	}	public List<Gift_items> findGiftItemsBySlr(List<Integer> list) {		try {			return this.getSqlSession().selectList("findGiftItemsBySlr", list);		} catch (RuntimeException re) {			logger.error("findGiftItemsBySlr failed :{}", re);			throw re;		}	}}