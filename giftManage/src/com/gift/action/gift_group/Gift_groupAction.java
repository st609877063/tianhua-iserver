package com.gift.action.gift_group;import java.util.List;import javax.annotation.Resource;import org.apache.commons.lang.StringUtils;import org.apache.log4j.Logger;import org.springframework.context.annotation.Scope;import org.springframework.stereotype.Controller;import com.gift.action.BaseAction;import com.gift.bean.Gift_group;import com.gift.common.CommonConstant;import com.gift.service.Gift_groupService;import com.gift.tools.DateTools;import com.gift.tools.UserValidator;@Controller@Scope("prototype")public class Gift_groupAction extends BaseAction {	private static final long serialVersionUID = 1L;		@Resource(name = "gift_groupServiceImpl")	private Gift_groupService service;		//实体对象和结果集	private Gift_group gift_group;	private List<Gift_group> gift_group_list;		private String keyword = "";	private String pagehtml;	private String update_group_id;	// ----------分页 start----------	private int pageNow = 1; // 页码数	private int pageSize = 5; // 页面行数	private int rowCount = 0;// 总行数	private int pageCount = 1; // 总页数	// ----------分页 end----------		/**	 * 分页查询	 * @return	 * @throws Exception	 */	public String list() throws Exception {				// 关键字查询		rowCount = service.findByKeyword_count(keyword);// 计算出实际记录数		pageCount = rowCount / pageSize;// 计算出实际页数		if ((rowCount % pageSize != 0) || (pageCount == 0))			pageCount++;		gift_group_list = service.findByKeyword(keyword, (pageNow - 1)				* pageSize, pageSize);				return "listsuccess";	}	public String saveP() throws Exception {		gift_group_list = service.findAll();		return "saveP";	}	/**	 * 校验输入	 * @throws Exception 	 */	private int validateInput() throws Exception{		if(StringUtils.isBlank(gift_group.getGroup_name())){			addFieldError("group_name","分组名不能为空!");			return CommonConstant.ERROR;		}else{			List<Gift_group> g_list = service.findByName(gift_group.getGroup_name());			if(g_list!=null&&g_list.size()>0){				for(Gift_group g:g_list){					if(g.getGroup_id()!=gift_group.getGroup_id()){						addFieldError("group_name_exist","分组名已存在!");						return CommonConstant.ERROR;					}				}			}		}		return CommonConstant.SUCCESS;	}		/**	 * 保存	 * @return	 * @throws Exception	 */	public String save() throws Exception {		try {			if(validateInput()==CommonConstant.ERROR){				return INPUT;			}			gift_group.setCreate_time(DateTools.getTimestamp());			gift_group.setAdd_user_id(Integer.parseInt(UserValidator.getCookie(getRequest())[0]));			service.save(gift_group);			return "savesuccess";		} catch (Exception e) {			Logger logger = Logger.getLogger(this.getClass());			logger.error("programe error !gift_groupsaveAction.java "); // 写到日志文件																		// C:\\log4j_error.log																		// 中			return "saveerror";		}	}		public String update() throws Exception {		try {			if(validateInput()==CommonConstant.ERROR){				return INPUT;			}			service.update(gift_group);			return "updatesuccess";		} catch (Exception e) {			Logger logger = Logger.getLogger(this.getClass());			logger.error("programe error !gift_groupupdateAction.java "); // 写到日志文件																		// C:\\log4j_error.log																		// 中			return "updateerror";		}	}	public String updateP() throws Exception {		try {			gift_group_list = service.findAll();			int group_id = Integer.parseInt(update_group_id);			gift_group = service.findById(group_id);			return "updateP";		} catch (Exception e) {			return "list";		}	}	public String remove() throws Exception {		service.delete(gift_group);		return "removesuccess";	}	public void setGift_group_list(List<Gift_group> gift_group_list) {		this.gift_group_list = gift_group_list;	}	public List<Gift_group> getGift_group_list() {		return gift_group_list;	}		public Gift_groupService getService() {		return service;	}	public void setService(Gift_groupService service) {		this.service = service;	}	public Gift_group getGift_group() {		return gift_group;	}	public void setGift_group(Gift_group gift_group) {		this.gift_group = gift_group;	}	public String getKeyword() {		return keyword;	}	public void setKeyword(String keyword) {		this.keyword = keyword;	}	public String getPagehtml() {		return pagehtml;	}	public void setPagehtml(String pagehtml) {		this.pagehtml = pagehtml;	}	public int getPageNow() {		return pageNow;	}	public void setPageNow(int pageNow) {		this.pageNow = pageNow;	}	public int getPageSize() {		return pageSize;	}	public void setPageSize(int pageSize) {		this.pageSize = pageSize;	}	public int getRowCount() {		return rowCount;	}	public void setRowCount(int rowCount) {		this.rowCount = rowCount;	}	public int getPageCount() {		return pageCount;	}	public void setPageCount(int pageCount) {		this.pageCount = pageCount;	}	public void setUpdate_group_id(String update_group_id) {		this.update_group_id = update_group_id;	}	public String getUpdate_group_id() {		return update_group_id;	}	}