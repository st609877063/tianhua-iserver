package com.gift.action.gift_peoples;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.annotation.Resource;import org.apache.commons.lang.StringUtils;import org.apache.log4j.Logger;import org.springframework.context.annotation.Scope;import org.springframework.stereotype.Controller;import com.gift.action.BaseAction;import com.gift.bean.Gift_code;import com.gift.bean.Gift_peoples;import com.gift.common.CommonConstant;import com.gift.service.Gift_codeService;import com.gift.service.Gift_peoplesService;import com.gift.tools.DateTools;import com.gift.tools.UserValidator;@Controller@Scope("prototype")public class Gift_peoplesAction extends BaseAction{	private static final long serialVersionUID = -1356742204694930010L;	@Resource(name = "gift_peoplesServiceImpl")	private Gift_peoplesService peoplesService;	@Resource(name = "gift_codeServiceImpl")	private Gift_codeService codeService;		//实体对象和结果集	private Gift_peoples gift_peoples;	private List<Gift_peoples> gift_peoples_list;	private List<Gift_code> gift_code_list;		private String keyword = "";	private String pagehtml;	private String update_peoples_id;	// ----------分页 start----------	private int pageNow = 1; // 页码数	private int pageSize = 5; // 页面行数	private int rowCount = 0;// 总行数	private int pageCount = 1; // 总页数	// ----------分页 end----------	/**	 * 分页查询	 * @return	 * @throws Exception	 */	public String list() throws Exception {			// 关键字查询		rowCount = peoplesService.findByKeyword_count(gift_peoples.getP_flag(),keyword);// 计算出实际记录数		pageCount = rowCount / pageSize;// 计算出实际页数		if ((rowCount % pageSize != 0) || (pageCount == 0))			pageCount++;		gift_peoples_list = peoplesService.findByKeyword(gift_peoples.getP_flag(),keyword, (pageNow - 1)				* pageSize, pageSize);				//如果是受礼人,将部门编号替换成名称		if(gift_peoples.getP_flag()==CommonConstant.PEOPLE_FLAG_RECEIVER){			gift_code_list = codeService.findAll();			Map <String,String> codeMap = new HashMap<String,String>();			if(gift_code_list!=null&&gift_code_list.size()>0){				for(Gift_code c:gift_code_list){					codeMap.put(String.valueOf(c.getPk_id()), c.getName());				}			}			if(gift_peoples_list!=null&&gift_peoples_list.size()>0){				for(Gift_peoples p:gift_peoples_list){					String p_bm = p.getP_bm();					if(StringUtils.isNotBlank(p_bm)){						String[] codeIdArr = p_bm.split("#");						for(String idStr:codeIdArr){							if(StringUtils.isNotBlank(codeMap.get(idStr))){								p_bm = p_bm.replace(idStr, codeMap.get(idStr));							}						}						if(p_bm.endsWith("#")){							p_bm = p_bm.substring(0, p_bm.length()-1);						}						p.setP_bm(p_bm);					}				}			}		}		return "listsuccess";	}		/**	 * 跳转到添加页面	 * @return	 * @throws Exception	 */	public String saveP() throws Exception {		List<Gift_code> codeFilterList = new ArrayList<Gift_code>();		gift_code_list = codeService.findAll();		if(gift_code_list!=null&&gift_code_list.size()>0){			for(Gift_code c:gift_code_list){				if("PARENT".equals(c.getParent_code())){					codeFilterList.add(c);				}			}			gift_code_list.removeAll(codeFilterList);		}		return "saveP";	}		/**	 * 校验输入	 * @throws Exception 	 */	private int validateInput() throws Exception{		if(StringUtils.isBlank(gift_peoples.getP_name())){			addFieldError("p_name","人物姓名不能为空!");			return CommonConstant.ERROR;		}else if(gift_peoples.getP_type()==null){			addFieldError("p_type","请选择人物类型!");			return CommonConstant.ERROR;		}else if(StringUtils.isBlank(gift_peoples.getP_spouse())){			addFieldError("p_spouse","人物配偶不能为空!");			return CommonConstant.ERROR;		}else if(StringUtils.isBlank(gift_peoples.getP_country())){			addFieldError("p_country","人物国家不能为空!");			return CommonConstant.ERROR;		}else if(StringUtils.isBlank(gift_peoples.getP_bm())){			addFieldError("p_bm","人物部门不能为空!");			return CommonConstant.ERROR;		}else if(StringUtils.isBlank(gift_peoples.getP_title())){			addFieldError("p_title","人物头衔不能为空!");			return CommonConstant.ERROR;		}else{			List<Gift_peoples> p_list = peoplesService.findByName(gift_peoples.getP_name());			if(p_list!=null&&p_list.size()>0){				for(Gift_peoples p:p_list){					if(p.getP_id()!=gift_peoples.getP_id()){						addFieldError("p_name_exist","人物名称已存在!");						return CommonConstant.ERROR;					}				}			}		}		return CommonConstant.SUCCESS;	}		/**	 * 添加或更新	 * @return	 * @throws Exception	 */	public String save() throws Exception {		try {			if(validateInput()==CommonConstant.ERROR){				List<Gift_code> codeFilterList = new ArrayList<Gift_code>();				gift_code_list = codeService.findAll();				if(gift_code_list!=null&&gift_code_list.size()>0){					for(Gift_code c:gift_code_list){						if("PARENT".equals(c.getParent_code())){							codeFilterList.add(c);						}					}					gift_code_list.removeAll(codeFilterList);				}				return INPUT;			}			gift_peoples.setP_createtime(DateTools.getTimestamp());			gift_peoples.setP_adduser(Integer.parseInt(UserValidator.getCookie(getRequest())[0]));			peoplesService.save(gift_peoples);			return "savesuccess";		} catch (Exception e){			e.printStackTrace();			Logger logger = Logger.getLogger(this.getClass());			logger.error("programe error !gift_usersaveAction.java "); // 写到日志文件			return "saveerror";		}	}		/**	 * 跳转到更新页面	 * @return	 * @throws Exception	 */	public String updateP() throws Exception {		try {			int p_id = Integer.parseInt(update_peoples_id);			gift_peoples = peoplesService.findByID(p_id);			List<Gift_code> codeFilterList = new ArrayList<Gift_code>();			gift_code_list = codeService.findAll();			if(gift_code_list!=null&&gift_code_list.size()>0){				for(Gift_code c:gift_code_list){					if("PARENT".equals(c.getParent_code())){						codeFilterList.add(c);					}				}				gift_code_list.removeAll(codeFilterList);			}			return "updateP";		} catch (Exception e) {			return "list";		}	}		/**	 * 更新	 * @return	 * @throws Exception	 */	public String update() throws Exception {		try {			if(validateInput()==CommonConstant.ERROR){				List<Gift_code> codeFilterList = new ArrayList<Gift_code>();				gift_code_list = codeService.findAll();				if(gift_code_list!=null&&gift_code_list.size()>0){					for(Gift_code c:gift_code_list){						if("PARENT".equals(c.getParent_code())){							codeFilterList.add(c);						}					}					gift_code_list.removeAll(codeFilterList);				}				return INPUT;			}			peoplesService.update(gift_peoples);			return "updatesuccess";		} catch (Exception e) {			e.printStackTrace();			Logger logger = Logger.getLogger(this.getClass());			logger.error("programe error !gift_userupdateAction.java "); // 写到日志文件			return "updateerror";		}	}	/**	 * 删除	 * @return	 * @throws Exception	 */	public String remove() throws Exception {		peoplesService.delete(gift_peoples);		return "removesuccess";	}		public void setGift_peoples(Gift_peoples gift_peoples) {		this.gift_peoples = gift_peoples;	}	public Gift_peoples getGift_peoples() {		return gift_peoples;	}	public void setGift_peoples_list(List<Gift_peoples> gift_peoples_list) {		this.gift_peoples_list = gift_peoples_list;	}	public List<Gift_peoples> getGift_peoples_list() {		return gift_peoples_list;	}	public String getKeyword() {		return keyword;	}	public void setKeyword(String keyword) {		this.keyword = keyword;	}	public String getPagehtml() {		return pagehtml;	}	public void setPagehtml(String pagehtml) {		this.pagehtml = pagehtml;	}	public int getPageNow() {		return pageNow;	}	public void setPageNow(int pageNow) {		this.pageNow = pageNow;	}	public int getPageSize() {		return pageSize;	}	public void setPageSize(int pageSize) {		this.pageSize = pageSize;	}	public int getRowCount() {		return rowCount;	}	public void setRowCount(int rowCount) {		this.rowCount = rowCount;	}	public int getPageCount() {		return pageCount;	}	public void setPageCount(int pageCount) {		this.pageCount = pageCount;	}		public String getUpdate_peoples_id() {		return update_peoples_id;	}	public void setUpdate_peoples_id(String update_peoples_id) {		this.update_peoples_id = update_peoples_id;	}	public void setCodeService(Gift_codeService codeService) {		this.codeService = codeService;	}	public Gift_codeService getCodeService() {		return codeService;	}	public void setGift_code_list(List<Gift_code> gift_code_list) {		this.gift_code_list = gift_code_list;	}	public List<Gift_code> getGift_code_list() {		return gift_code_list;	}	}